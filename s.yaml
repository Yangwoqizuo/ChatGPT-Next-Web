edition: 1.0.0
name: copilot

access: "{{ access }}"

vars: # 全局变量
  region: "{{ region }}"
  service:
    name: "{{ serviceName }}"
    description: 'Serverless Devs Web Framework Service'

services:
  framework: # 业务名称/模块名称
    # 如果只想针对 framework 下面的业务进行相关操作，可以在命令行中加上 framework，例如：
    # 只对framework进行构建：s framework build
    # 如果不带有 framework ，而是直接执行 s build，工具则会对当前Yaml下，所有和 framework 平级的业务模块（如有其他平级的模块，例如下面注释的next-function），按照一定顺序进行 build 操作
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy: # 在deploy之前运行
        - run: export PATH=/usr/local/versions/node/v18.14.2/bin:$PATH && yarn install 
               --production --registry=https://registry.npmmirror.com
        # 要执行的系统命令，类似于一种钩子的形式
          path: ./ # 执行系统命令/钩子的路径
        - run: export PATH=/usr/local/versions/node/v18.14.2/bin:$PATH && yarn add cross-env
          path: ./
        - run: export PATH=/usr/local/versions/node/v18.14.2/bin:$PATH && yarn build 
          path: ./ 
        - run: mkdir -p ./output/public
          path: ./     
        - run: mkdir -p ./output/.next/static
          path: ./      
        - run: mkdir -p ./output/.next/server
          path: ./ 
        - run: cp -ru public ./output/public
          path: ./      
        - run: cp -ru .next/standalone ./output
          path: ./ 
        - run: cp -ru .next/static ./output/.next/static
          path: ./
        - run: cp -ru .next/server ./output/.next/server
          path: ./
    props: # 组件的属性值
      region: ${vars.region}         # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "{{ functionName }}"
        description: 'Serverless Devs Web Framework Function'
        codeUri: './output'
        runtime: custom
        timeout: 60
        caPort: 3000
        layers:
          - acs:fc:${vars.region}:official:layers/Nodejs18/versions/1
        environmentVariables:
          PATH: /opt/nodejs18/bin:/usr/local/bin/apache-maven/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ruby/bin:/opt/bin:/code:/code/bin
          NODE_PATH: /opt/nodejs/node_modules
        customRuntimeConfig:
          command:
            - node
            - server.js
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: '/*'

#  next-function: # 第二个函数的案例，仅供参考
#    # 如果在当前项目下执行 s deploy，会同时部署模块：
#    #   helloworld：服务hello-world-service，函数cpp-event-function
#    #   next-function：服务hello-world-service，函数next-function-example
#    # 如果想单独部署当前服务与函数，可以执行 s + 模块名/业务名 + deploy，例如：s next-function deploy
#    # 如果想单独部署当前函数，可以执行 s + 模块名/业务名 + deploy function，例如：s next-function deploy function
#    # 更多命令可参考：https://www.serverless-devs.com/fc/readme#文档相关
#    component: fc
#    props:
#      region: ${vars.region}
#      service: ${vars.service} # 应用整体的服务配置
#      function: # 定义一个新的函数
#        name: next-function-example
#        description: 'hello world by serverless devs'
